#!/usr/bin/env node
var sourceLang, targetLang, sourceHtml, script, args, config, cxConfig,
	fs = require( 'fs' ),
	yaml = require( 'js-yaml' ),
	Apertium = require( __dirname + '/../lib/mt/Apertium.js' );

config = yaml.load( fs.readFileSync( 'config.yaml' ) );
if ( !config ) {
	console.error( 'Failed to load config' );
	process.exit( 1 );
}
cxConfig = config.services && Array.isArray( config.services ) &&
	config.services.filter( function ( item ) {
		return item && item.name === 'cxserver';
	} )[ 0 ];
if ( !cxConfig ) {
	console.error( 'Cannot find cxserver config' );
	process.exit( 1 );
}

script = process.argv[ 1 ];
args = process.argv.slice( 2 );
if ( args.length !== 2 ) {
	process.stderr.write(
		'Usage: node ' + script + ' <sourceLang> <targetLang> < xhtmlSource\n\n' +
		'xhtml must be wrapped in a block element such as <p>...</p> or <div>..</div>.\n' +
		'Example:\n\techo "<p>A <b>red</b> box.</p>" | node ' + script + ' en es\n\n'
	);
	process.exit( 1 );
}

sourceLang = args[ 0 ];
targetLang = args[ 1 ];

sourceHtml = [];

process.stdin.on( 'data', function ( data ) {
	sourceHtml.push( data );
} );
process.stdin.on( 'end', function () {
	new Apertium( cxConfig ).translate(
		sourceLang,
		targetLang,
		sourceHtml.join( '' )
	).then( function ( targetHtml ) {
		process.stdout.write( targetHtml + '\n' );
	} ).catch( function ( error ) {
		if ( error.stack ) {
			console.error( 'error', error.stack );
		} else {
			console.error( 'error', error );
		}
		process.exit( 2 );
	} );
} );
